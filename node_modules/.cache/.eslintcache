[{"/home/anouiri/Documents/portfolio/src/index.js":"1","/home/anouiri/Documents/portfolio/src/reportWebVitals.js":"2","/home/anouiri/Documents/portfolio/src/App.js":"3","/home/anouiri/Documents/portfolio/src/Datas/Datas.js":"4","/home/anouiri/Documents/portfolio/src/Pages/ExpertisePage.jsx":"5","/home/anouiri/Documents/portfolio/src/Pages/Home.jsx":"6","/home/anouiri/Documents/portfolio/src/Pages/WorkPage.jsx":"7","/home/anouiri/Documents/portfolio/src/Pages/ContactPage.jsx":"8","/home/anouiri/Documents/portfolio/src/Pages/ExperiencePage.jsx":"9","/home/anouiri/Documents/portfolio/src/components/Description.jsx":"10","/home/anouiri/Documents/portfolio/src/components/ArrayCompetences/ArrayCompetences.jsx":"11","/home/anouiri/Documents/portfolio/src/components/Navbar/SideNavbar.jsx":"12","/home/anouiri/Documents/portfolio/src/components/Navbar/Navbar.jsx":"13","/home/anouiri/Documents/portfolio/src/Utils/ScrollToComponent.jsx":"14","/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarRight.jsx":"15","/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarLeft.jsx":"16","/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarDown.jsx":"17","/home/anouiri/Documents/portfolio/src/components/Navbar/MenuNavbar.jsx":"18"},{"size":535,"mtime":1727929723046,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1727929723046,"results":"21","hashOfConfig":"20"},{"size":979,"mtime":1727929722945,"results":"22","hashOfConfig":"20"},{"size":12914,"mtime":1727929723045,"results":"23","hashOfConfig":"20"},{"size":1627,"mtime":1727929723045,"results":"24","hashOfConfig":"20"},{"size":767,"mtime":1727929723045,"results":"25","hashOfConfig":"20"},{"size":9525,"mtime":1727929723045,"results":"26","hashOfConfig":"20"},{"size":6177,"mtime":1727929723045,"results":"27","hashOfConfig":"20"},{"size":8527,"mtime":1727929723045,"results":"28","hashOfConfig":"20"},{"size":2117,"mtime":1727929723045,"results":"29","hashOfConfig":"20"},{"size":6084,"mtime":1727929723045,"results":"30","hashOfConfig":"20"},{"size":3286,"mtime":1727929723046,"results":"31","hashOfConfig":"20"},{"size":2799,"mtime":1727929723046,"results":"32","hashOfConfig":"20"},{"size":229,"mtime":1727929723045,"results":"33","hashOfConfig":"20"},{"size":2491,"mtime":1727929723046,"results":"34","hashOfConfig":"20"},{"size":490,"mtime":1727929723046,"results":"35","hashOfConfig":"20"},{"size":719,"mtime":1727929723046,"results":"36","hashOfConfig":"20"},{"size":942,"mtime":1727929723046,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ckauga",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/anouiri/Documents/portfolio/src/index.js",[],[],"/home/anouiri/Documents/portfolio/src/reportWebVitals.js",[],[],"/home/anouiri/Documents/portfolio/src/App.js",[],[],"/home/anouiri/Documents/portfolio/src/Datas/Datas.js",[],[],"/home/anouiri/Documents/portfolio/src/Pages/ExpertisePage.jsx",[],[],"/home/anouiri/Documents/portfolio/src/Pages/Home.jsx",[],[],"/home/anouiri/Documents/portfolio/src/Pages/WorkPage.jsx",["94"],[],"import { Grid } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport { competencesLogo } from '../Datas/Datas.js';\n\nconst Title = ({ title1, title2, windowWidth }) => {\n\n  const textTitle = {\n    fontSize: windowWidth  <= 340 ? '27vw' : '100px',\n    textShadow: '1px 3px 11px rgba(0,0,0,.3)',\n    letterSpacing: '-0.2px',\n    fontFamily: 'Poppins-Medium',\n    fontWeight: '600',\n    color: 'white',\n    margin: '0',\n    boxSizing: 'border-box',\n    lineHeight: '1.4',\n  };\n\n  return (\n    <Grid item>\n      <Grid item>\n        <span style={textTitle}>\n          {title1}\n        </span>\n      </Grid>\n      <Grid item style={{ paddingBottom: '20px', marginTop: '-20px' }}>\n        <span style={textTitle}>\n          {title2}\n        </span>\n      </Grid>\n    </Grid>\n  );\n};\n\n\nconst FilterProjects = ({ datas, sectionSelected, setSectionSelected }) => {\n\n  const [mouseOn, setMouseOn] = useState('');\n\n  const basicTextStyle = {\n    fontSize: '0.98em',\n    fontWeight: '500',\n    color: 'grey'\n  };\n\n  const ClickableText = ({ data }) => {\n\n    const getNumberProjects = (categorie) => {\n      if (categorie === 'all')\n        return data.projects.length;\n      else {\n        const categoryItem = datas[0].projects.filter((project) => project.categorie === categorie);\n        if (categoryItem)\n          return categoryItem.length;\n      }\n      return 0;\n    };\n\n    const clickableTextStyle = (id) => {\n      return {\n        fontSize: '0.98em',\n        fontWeight: '500',\n        cursor: 'pointer',\n        color: (sectionSelected === id || mouseOn === id) ? '#66d9ed' : 'grey'\n      }\n    };\n\n    const numberTextStyle = (categorie) => {\n      return {\n        fontSize: '0.80em',\n        fontWeight: '500',\n        cursor: 'pointer',\n        color: (sectionSelected === categorie || mouseOn === categorie) ? '#66d9ed' : 'grey'\n      }\n    };\n\n    return (\n      <Grid container direction='row'\n        onMouseEnter={() => setMouseOn(data.categorie)}\n        onMouseLeave={() => setMouseOn('')}\n        onClick={() => setSectionSelected(data.categorie)}>\n        <Grid item>\n          <span style={clickableTextStyle(data.categorie)}>\n            {data.text}\n          </span>\n        </Grid>\n        <Grid item style={{ marginTop: '-7px' }}>\n          <span style={numberTextStyle(data.categorie)}>\n            {getNumberProjects(data.categorie)}\n          </span>\n        </Grid>\n      </Grid>\n    )\n  };\n\n  return (\n    <Grid container direction='row'>\n      <Grid item style={{ paddingRight: '15px' }}>\n        <span style={basicTextStyle}>\n          Filter by\n        </span>\n      </Grid>\n      <Grid item style={{ paddingRight: '3px' }}>\n        <ClickableText data={datas[0]} />\n      </Grid>\n      <Grid item style={{ paddingRight: '15px' }}>\n        <span style={basicTextStyle}>\n          /\n        </span>\n      </Grid>\n      <Grid item style={{ paddingRight: '3px' }}>\n        <ClickableText data={datas[1]} />\n      </Grid>\n      <Grid item style={{ paddingRight: '15px' }}>\n        <span style={basicTextStyle}>\n          /\n        </span>\n      </Grid>\n      <Grid item style={{ paddingRight: '3px' }}>\n        <ClickableText data={datas[2]} />\n      </Grid>\n    </Grid>\n  );\n}\n\nconst Project = ({ data, projectSelected, windowWidth }) => {\n\n  const [isMouseOnShowProject, setIsMouseOnShowProject] = useState(false);\n\n  const titleStyle = {\n    color: \"white\",\n    fontSize: \"20px\",\n    marginBottom: \"5px\",\n    lineHeight: \"1.1\",\n    fontFamily: \"ArabotoBold\"\n  };\n\n  const typeStyle = {\n    color: \"#efefef\",\n    fontSize: \"17px\",\n    marginBottom: \"5px\",\n    lineHeight: \"1.1\",\n    fontFamily: \"ArabotoLight\"\n  };\n\n  const showProjectStyle = {\n    color: isMouseOnShowProject ? \"#66d9ed\" : \"#efefef\",\n    cursor: 'pointer',\n    fontSize: \"17px\",\n    marginBottom: \"5px\",\n    lineHeight: \"1.1\",\n    fontFamily: \"ArabotoLight\"\n  };\n\n  return (\n    <Grid container direction='column' style={{width: windowWidth <= 438 ? '80vw' : '380px' }}>\n      <Grid item style={{ position: 'relative' }}>\n        <img\n          src={data.imageSrc}\n          style={{\n            borderRadius: '7px',\n            width: windowWidth <= 438 ? '80vw' : '380px',\n            height: '285px',\n            cursor: 'pointer',\n            filter: data.inprogress ? 'grayscale(100%)' : 'none',\n            opacity: data.inprogress ? 0.4 : 1 \n          }}\n          alt=\"ImageProject\"\n        />\n        {data.inprogress && (\n          <span style={{\n            position: 'absolute',\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            color: 'white',\n            fontSize: '24px',\n            fontWeight: 'bold',\n            textShadow: '1px 1px 3px rgba(0, 0, 0, 0.7)',\n            pointerEvents: 'none'\n          }}>\n            IN PROGRESS\n          </span>\n        )}\n      </Grid>\n\n      <Grid container direction='column'\n        style={{\n          padding: '30px',\n          paddingBottom: '10px',\n          marginTop: '-7px',\n          height: '200px',\n          borderBottomLeftRadius: '5px',\n          borderBottomRightRadius: '5px',\n          backgroundColor: \"#262626\"}}>\n        <Grid item style={{ marginBottom: '-2px', width: '100%', overflow: \"hidden\", textOverflow: \"ellipsis\", whiteSpace: \"nowrap\", color: \"#efefef\", fontSize: \"17px\"  }}>\n          <span style={titleStyle}>\n            {data.title}\n          </span>\n        </Grid>\n        { projectSelected !== data.title ? (\n          <Grid item>\n          <span style={typeStyle}>\n            {data.categorie}\n          </span>\n        </Grid>\n        ) : (\n          <Grid container direction='row' style={{ alignItems: 'center' }}>\n            <Grid item\n              style={{\n                paddingRight: '10px',\n              }}\n              onMouseEnter={() => {\n                if (!data.inprogress)\n                  setIsMouseOnShowProject(true)\n              }}\n              onMouseLeave={() => setIsMouseOnShowProject(false)}\n              onClick={() => {\n                if (!data.inprogress) {\n                  window.open(data.link, '_blank');\n                }\n              }}>\n              <span style={showProjectStyle}>\n                {data.inprogress ? 'In Progress' : 'Show project'}\n              </span>\n            </Grid>\n            <Grid item style={{ color: 'grey', backgroundColor: 'grey', width: '50px', height: '2px', marginTop: '4px' }} />\n          </Grid>\n        )}\n       <Grid container direction='row' style={{paddingTop: '20px'}}>\n          {data.langages.map((langage, index) => {\n\n            const langageObjet = competencesLogo.find(item => item.langage === langage);\n\n            return (\n              <Grid item key={index}\n                style={{\n                  paddingRight: index === data.langages.length ? '0px' : '10px'\n                }}>\n                  <img\n                    src={langageObjet ? langageObjet.logo : ''}\n                    style={{ width: \"40px\", height: '40px', borderRadius: '50%' }}\n                    alt=\"ImageCompetence\"\n                  />\n              </Grid>\n            );\n          })}\n        </Grid>\n\n      </Grid>\n    </Grid>\n  );\n}\n\nconst ProjectsList = ({ datas, sectionSelected, windowWidth }) => {\n\n  const [projectsDatas, setProjectsDatas] = useState([]);\n  const [projectSelected, setProjectSelected] = useState(\"\");\n  \n  useEffect(() => {\n    const tmpProjects = getProjectsData(sectionSelected);\n    \n    setProjectsDatas(tmpProjects);\n  }, [sectionSelected, projectsDatas]);\n\n  const getProjectsData = (categorie) => {\n    if (categorie === 'all')\n      return datas[0].projects;\n    else {\n      const categoryItem = datas[0].projects.filter((project) => project.categorie === categorie);\n      if (categoryItem)\n        return categoryItem;\n    }\n    return [];\n  };\n\n\n  return (\n    <Grid container direction='row' style={{width: '100%'}}>\n      {projectsDatas.map((projectData, index) => (\n        <Grid item key={index}\n          onMouseEnter={() => setProjectSelected(projectData.title)}\n          onMouseLeave={() => setProjectSelected(\"\")}\n          style={{paddingRight: index === projectsDatas.length ? '0px' : '36px', paddingBottom: '40px'}}>\n          <Project data={projectData} projectSelected={projectSelected} windowWidth={windowWidth}/>\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n\nconst WorkPage = ({ datas }) => {\n\n  const [sectionSelected, setSectionSelected] = useState('all');\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n\n  return (\n    <Grid container\n      direction='column'\n      style={{\n        width: '100%',\n        maxWidth: '1250px',\n        margin: '0 auto'\n      }}>\n      <Grid item id='work' style={{width: '100%', paddingTop: '40px'}}>\n        <Grid>\n          <Title title1='My' title2='Works' windowWidth={windowWidth}/>\n        </Grid>\n      </Grid>\n\n      <Grid item style={{paddingBottom: '40px', width: '100%'}}>\n        <FilterProjects datas={datas} sectionSelected={sectionSelected} setSectionSelected={setSectionSelected} />\n      </Grid>\n      <Grid item style={{width: '100%'}}>\n        <ProjectsList datas={datas} sectionSelected={sectionSelected} windowWidth={windowWidth}/>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default WorkPage;\n","/home/anouiri/Documents/portfolio/src/Pages/ContactPage.jsx",[],[],"/home/anouiri/Documents/portfolio/src/Pages/ExperiencePage.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Description.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/ArrayCompetences/ArrayCompetences.jsx",["95"],[],"import { Grid } from '@mui/material';\nimport ComputerIcon from '@mui/icons-material/Computer';\nimport LanguageIcon from '@mui/icons-material/Language';\nimport DeveloperModeIcon from '@mui/icons-material/DeveloperMode';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { useEffect, useState } from 'react';\n\nconst TitleField = ({ icon, title1, title2, bandColor, bandSize }) => {\n  const titleStyle = {\n    color: 'white',\n    fontFamily: 'Poppins-Bold',\n    fontSize: '26px',\n    fontWeight: '600',\n    lineHeight: '1.2em',\n    margin: '1px',\n    letterSpacing: '-0.1em',\n    position: 'relative',\n    zIndex: '1',\n  };\n\n  const Band = ({ bandSize }) => {\n    return (\n      <Grid item style={{\n        border: `2px solid ${bandColor}`,\n        width: bandSize,\n        borderRadius: '50px',\n        height: '7px',\n        backgroundColor: bandColor,\n        zIndex: '0',\n        marginTop: '-10px',\n      }} />\n    );\n  };\n\n  return (\n    <Grid container direction='row' alignItems='center' spacing={2}>\n      <Grid item>\n        {icon}\n      </Grid>\n      <Grid item>\n        <Grid container direction='column'>\n          <Grid item>\n            <h5 style={titleStyle}>\n              {title1}\n            </h5>\n          </Grid>\n          <Grid item>\n            <Band bandSize={bandSize} />\n          </Grid>\n          <Grid item>\n            <h5 style={titleStyle}>\n              {title2}\n            </h5>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst DescriptionField = ({ description }) => {\n  const descriptionStyle = {\n    color: 'white',\n    fontWeight: '400',\n    lineHeight: '1.4em',\n    fontFamily: 'Roboto',\n    wordWrap: 'break-word',\n    fontSize: '17px'\n  };\n\n  const h3Style = {\n    color: 'grey',\n    fontSize: '14px'\n  };\n\n  return (\n    <Grid container direction='row' alignItems='center'>\n      <Grid item>\n        <Grid container direction='column' style={{ borderWidth: '3px 1.5px 3px 3px', borderColor: '#a3a3a3', alignItems: 'center' }}>\n          <Grid item style={{ paddingBottom: '10px' }}>\n            <span style={h3Style}>\n              {'<h3>'}\n            </span>\n          </Grid>\n          <Grid item style={{ height: '80px', border: '1px solid grey', marginBottom: '10px' }} />\n          <Grid item>\n            <span style={h3Style}>\n              {'<h3>'}\n            </span>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item style={{ flex: 1, paddingLeft: '7px' }}>\n        <span style={descriptionStyle}>\n          {description}\n        </span>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst Icon = ({ type }) => {\n  const iconStyle = {\n    width: '50px',\n    height: '50px',\n    color: 'white',\n  };\n\n  return (\n    <Grid item>\n      {type === 'computer' ?\n        <ComputerIcon style={iconStyle} /> :\n        type === 'web' ? <LanguageIcon style={iconStyle} /> :\n          type === 'mobile' ? <DeveloperModeIcon style={iconStyle} /> :\n            <DeleteIcon style={iconStyle} />}\n    </Grid>\n  );\n};\n\nconst CompetenceBox = ({ dataBox, isLittle }) => {\n  return (\n    <Grid container direction='column'\n      style={{\n        border: '1px solid white',\n        paddingTop: '40px',\n        paddingBottom: '40px',\n        paddingLeft: '30px',\n        paddingRight: '30px',\n        maxWidth: isLittle ? '362px' : '650px',\n        minWidth: '260px',\n        boxSizing: 'border-box',\n      }}>\n      <Grid item>\n        <TitleField icon={<Icon type={dataBox.type} />} title1={dataBox.title1} title2={dataBox.title2} bandColor={dataBox.bandColor} bandSize={dataBox.bandSize} />\n      </Grid>\n      <Grid item>\n        <DescriptionField description={dataBox.description} />\n      </Grid>\n    </Grid>\n  );\n}\nconst QuoteBox = ({ quote, credits, isLittle }) => {\n\n  const quoteStyle = {\n    color: 'white',\n    fontSize: '25px',\n    lineHeight: '1.2em',\n    fontFamily: 'Poppins-Medium',\n    fontWeight: '600',\n    wordWrap: 'break-word',\n  };\n\n  const creditsStyle = {\n    color: '#e1e1e1',\n    fontSize: '15px',\n    fontFamily: 'Poppins-Medium',\n    fontWeight: '400',\n    wordWrap: 'break-word',\n  };\n\n  return (\n    <Grid container direction='row'\n      style={{\n        paddingTop: '40px',\n        paddingBottom: '40px',\n        paddingLeft: '30px',\n        maxWidth: '362px',\n        minWidth: '200px',\n        boxSizing: 'border-box'\n      }}>\n      <Grid item style={{ height: '195px', width: '10px', backgroundColor: '#b7f', border: '1px solid #b7f', marginBottom: '10px', marginRight: '20px' }} />\n      <Grid container direction='column' style={{ display: 'flex', flex: 1 }}>\n        <Grid item style={{ paddingBottom: '50px' }}>\n          <span style={quoteStyle}>\n            {quote}\n          </span>\n        </Grid>\n        <Grid item>\n          <span style={creditsStyle}>\n            {credits}\n          </span>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nconst ArrayCompetences = ({ data }) => {\n\n  const [windowSize, setWindowSize] = useState(window.innerWidth);\n  const [isWrapped, setIsWrapped] = useState(false);\n  const [isLittle, setIsLittle] = useState(false);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setIsWrapped(window.innerWidth <= 1114 && window.innerWidth >= 760);\n      setIsLittle(window.innerWidth >= 760);\n      setWindowSize(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    handleResize();\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  return (\n    <Grid container style={{ justifyContent: 'center' }}>\n      <Grid item>\n        <CompetenceBox dataBox={data[0]} isLittle={isLittle} />\n      </Grid>\n      <Grid item>\n        <CompetenceBox dataBox={data[1]} isLittle={isLittle}/>\n      </Grid>\n      <Grid item>\n        <CompetenceBox dataBox={data[2]} isLittle={isLittle}/>\n      </Grid>\n      {isWrapped && (\n        <Grid item>\n          <QuoteBox quote='Sometimes the best way to solve a problem is to help others.' credits=\"- Uncle Iroh, 'Avatar: The Last Airbender'\" />\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nexport default ArrayCompetences;\n","/home/anouiri/Documents/portfolio/src/components/Navbar/SideNavbar.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Navbar/Navbar.jsx",[],[],"/home/anouiri/Documents/portfolio/src/Utils/ScrollToComponent.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarRight.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarLeft.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Navbar/NavbarDown.jsx",[],[],"/home/anouiri/Documents/portfolio/src/components/Navbar/MenuNavbar.jsx",[],[],{"ruleId":"96","severity":1,"message":"97","line":264,"column":6,"nodeType":"98","endLine":264,"endColumn":38,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":190,"column":10,"nodeType":"102","messageId":"103","endLine":190,"endColumn":20},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProjectsData'. Either include it or remove the dependency array.","ArrayExpression",["104"],"no-unused-vars","'windowSize' is assigned a value but never used.","Identifier","unusedVar",{"desc":"105","fix":"106"},"Update the dependencies array to be: [sectionSelected, projectsDatas, getProjectsData]",{"range":"107","text":"108"},[7503,7535],"[sectionSelected, projectsDatas, getProjectsData]"]